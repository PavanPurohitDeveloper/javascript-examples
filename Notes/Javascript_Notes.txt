JavaScript course 2021: From Zero to Expert:
==============================================

github repo: https://github.com/jonasschmedtmann/complete-javascript-course
documentation: https://developer.mozilla.org/en-US/docs/Learn/JavaScript

### Which Javascript version you using?
------------------------------------
ECMAScript latest version - ES6
JS is not having any version numbers..

### Code Editor tool:- Visual Studio Code

### Color Theme: Monokai Pro  (File-> Preferences -> Color Theme -> select 'Monokai Pro')

### Visual Studio Code -> Settings -> select
		Autosave = onFocusChange
		Multi Cursor Modifier = ctrlCmd
		World Wrap = On
		Format On Save = Enable this one.
	Settings -> File Icon Theme  = Seti(Visual Studio Code)
	
	
### To open JavaScript console:-
	Open the chrome browser -> CTRL + Shift + J
	CTRL ++ -> to increase the maximum size..
	
### JavaScript Fundamentals:
-----------------------------
alert("Hello World")
	undefined
let js = 'amazing'
	undefined
if(js == 'amazing') alert('JavaScript is Fun!')
	undefined
js = 'boring'
	"boring"
if(js == 'amazing') alert('JavaScript is Fun!')
	undefined
40+8+23-10
	61

### What is JavaScript?
-------------------------
-> JavaScript is a High-Level, Object-Oriented, Multi-Paradigm, Programming language
		High-Level -> means we dont have to worry about complex stuff like memory management
		Object-Oriented -> Based on objects, for storing most kinds of data
		Multi-Paradigm -> we can use different styles of programming
		Programming language -> Instruct computer to do things
-> HTML, CSS, JavaScript --> used to develop dynamic web applications.	

### JavaScript Releases..
--------------------------
ES = ECMAScript

ES5 -> ES6/ES2015  --> ES7/ES2016 --> ES8/ES2017 --> ES9/ES2018 --> ES10/ES2019 --> ES11/ES2020
	   ------------------------------- Modern JavaScript --------------------------------------


### JavaScript need to attach to the HTML using <script> tag
### In-Line Script:- If you write JS code inside HTML using <script> tag either in <head> or <body> tag, this is called  In-Line Script.
	we use external javascript file.
	
### How to link JS file to HTML file ?
----------------------------------------	
At the end of <body> tag we use <script> tag.
<body>
  <h1>JavaScript Fundamentals – Part 1</h1>

  <script src="script.js"></script>
</body>

### console.log()
-------------------
To print some message/data to the developer console.
console.log("Hello this data will be printed to the console")
console.log(10*20)
-> 200

### Values and Variables:
---------------------------
Variable - It is like box which we can store value..holding the data.

### declaring a variable:- using 'let' keyword
		let js = "Jonas";

	Naming variables -> using camel case.
	let Person = 'Jonas' --> you should not start like this..
	let PI = 3.1415;  //If its real constant write like this convention.

### There are 7 primitive data types:
---------------------------------------
1. number: Floating point numbers .. used for decimals and integers
			let age = 23;
			
2. string:  Sequence of characters .. used for text.
			let firstName = 'Jonas';
			
3. boolean: Logical type that can only be true or false.. used for taking decisions..
			let fullAge = true;
			
4. undefined: declaring a variable but no value assigned such type is called undefined (means 'empty value')
			  That function is not going to return anything..
		Ex: 
			var x;
			let children; //its empty value.

5. null: Also means 'empty' value.

6. Symbol(ES2015): Value that is unique cannot be changed.(Not usefull for now)

7. BigInt(ES2020): Large Integers than the Number type can hold.

*** Javascript has dynamic typing: We do not have to manually define the datatype of the value stored in a variable.
	Instead, data types are determined automatically.
	-> Javascript automatically determines the datatype of a value when its stored into a variable.
	
	Variable: stores the value, that has a type.
	Value : Value that has a type.
	
### commenting the code:
---------------------------
/* ....  */  -> multi line comment
//     -> single line comment

### typeof:
------------
To show the type of value using , typeof
what type of operator/object is..

null:
-----
typeof null is an object. this is an bug in JS.
console.log(typeof null);  -> object

### 3 different ways of declaring variable in javascript:
------------------------------------------------------------
-> let keyword
-> var keyword - old way of declaring variable.
-> const keyword

let -> We use let keyword to declare variables that can change later at somepoint in code. during execution of program.
		block scope
const -> you cant change the value.. Immutable variable. we need to Initialize the value.
var -> old way of defining variable prior to ES6.
		is function scope
		
*** Not mandatory to declare the variable names in JS:


Basic Operators:
------------------
transform the values or combine multiple values..
-> Mathematical operators

//Basic Operators
const now = 2037;
const ageJonas = now - 1991;
const ageSarah = now - 2018;
console.log(ageJonas, ageSarah);

console.log(ageJonas * 2, ageSarah / 10, 2 ** 3);
//2 ** 3 means 2 to the power of 3 = 2 * 2 * 2

//we can use + operator to concatenate two Strings
const firstName = 'Jonas';
const lastName = 'Schmedtmann';
console.log(firstName + ' ' + lastName);

-> Assignment Operator:
let x = 10 + 5;  //15
x += 10; //+= ==>means  x = x + 10
x *= 4; // x = x * 4 = 180
x++; // x = x + 1
x--;
x--;
console.log(x)

-> Comparision operators: to produce boolean values

### Operator precedence:
-------------------------
- it executes from left to right.
- the order in which operator it executes.
	- All the math operators executed first before comparision.
	
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

- Assignment operators executed from right to left..

### Template Literals - use backticks
----------------------
-> can assemble multiple pieces into one final string.
-> can create multi line strings.

Ex:
	const firstName = 'Jonas';
	const job = 'teacher';
	const birthyear = 1991;
	const year = 2037;

	const jonas = "I'm " + firstName + ', a ' + (year - birthyear) + ' years old ' + job + '!';
	console.log(jonas);
	//use backticks
	const joansNew = `I'm ${firstName}, a ${year - birthyear} year old ${job}`;
	console.log(joansNew);

 ** For all the strings better to use backticks..
 console.log(`Just a regular string...`);
 
 //can create multi line strings.
console.log('String with \n\ multiple \n\ lines'); //current way
console.log(`String 
multiple 
lines`);  //new way uisng backsticks.

### Taking Decisions: if / else Statements
---------------------------------------------
// if-else statements

//Example:
const age = 15;
if (age >= 18) {
    console.log(`Saharah can start driving licence !`)
} else {
    const yearsLeft = 18 - age;
    console.log(`Sarah is too young. Wait another ${yearsLeft} years :)`)
}

//Example:
const birthYear = 2012;
let century;

if (birthYear <= 2000) {
    century = 20; //20th century
} else {
    century = 21; //21st century
}
console.log(century);

### Type Conversion and Type Coercion
-----------------------------------------
Type Conversion:- is when we manually convert from one type to another type. 
					Expicitly u want to convert from one type to another type.
Type Coercion:- is when JS automatically converts types behind the scenes for us.

NUmber() - converts from String to number

Nan:- Not a Number -> means Invalid Number..
----  whenvever operation involving numbers, fails to give us a new number.

String() -- converts from Number to String.

Examples for Type Conversion:
--------------
const inputYear = '1991';
//converts from string to number
console.log(Number(inputYear), inputYear);
console.log(inputYear + 10); //this is string

console.log(Number('Jonas')); // output is Nan
console.log(typeof Nan);

//converts from Number to String
console.log(String(23), 23);

Type Coercion:-
----------------
happens whenever an opeartor is dealing with two values that have different types.

//Type Coercion
console.log('I am ' + 23 + ' years old');
console.log('23' - '10' - 3);
//+ operator will converts number to string
//- operator will convert string to number
console.log('23' * '2');
console.log('23' / '2');
console.log('23' > '18');

let n = '1' + 1; // result is string '11'
n = n - 1; // 10
console.log(n);

console.log(2 + 3 + 4 + '5') // string "95"
console.log('10' - '4' - '3' - 2 + '5') // string "15"

### Truthy and Falsy Values:
------------------------------
Falsy Values:- are values that are not exactly false, it will become false when we try to convert them into a boolean.
JS has 5 falsy values:  
	0, '' (empty string), undefined, null, Nan
will be converted to false when we attempt to convert them to a boolean .. 
	they not exactly false initially. but they will become when converted to a boolean


Truthy Vlaues:- values that will be converted to true.
				Ex: Any number that is not 0. Or any string that is not empty '' string.
					empty object{} also truthy value
					
### Equality Operators: == vs. ===
-------------------------------------
===  --> returns boolean value. strict quality operator. when both values are exactly same. does not perform type cohercion.
		'18' === 18 //false
		
== --> does type cohercion..loose quality operator.	
		'18' == 18  //true

//Example:
const favourite = Number(prompt("What's your favourite number?"));
console.log(favourite);
console.log(typeof favourite);

if (favourite === 23) { // 22 === 23 -> FALSE
    console.log('Cool! 23 is an amzaing number!')
} else if (favourite === 7) {
    console.log('7 is also a cool number')
} else if (favourite === 9) {
    console.log('9 is also a cool number')
} else {
    console.log('Number is not 23 or 7 or 9')
}
if (favourite !== 23) console.log('Why not 23?');

### Boolean Logic:
--------------------
AND, OR, NOT operator

If A  AND  B - are true -> returns true, otherwise false.
						true when ALL are true
If A  OR  B - If one of variable is true , returns true
			  Even If one of variable is false , returns false
			  true || false -> is true

If A  NOT  B - If A is true, it will become false	 

age = 16 

### Logical Operators:
-----------------------
const hasDriversLicense = true; // A
const hasGoodVision = true; // B

console.log(hasDriversLicense && hasGoodVision); //compare 2 logical values.
console.log(hasDriversLicense || hasGoodVision);
console.log(!hasDriversLicense);

if (hasDriversLicense && hasGoodVision) {
    console.log('Sarah is able to drive!');
} else {
    console.log('Someone else should drive...');
}

const isTired = false; // C
console.log(hasDriversLicense && hasGoodVision && isTired);

if (hasDriversLicense && hasGoodVision && !isTired) {
    console.log('Sarah is able to drive!');
} else {
    console.log('Someone else should drive...');
}


### The switch Statement:
----------------------------
alternate way of if-else statement..to compare multiple options.

const day = 'monday';

switch (day) {
    case 'monday': // day === 'monday'
        console.log('Plan course structure');
        console.log('Go to coding meetup');
        break;
    case 'tuesday':
        console.log('Prepare theory videos');
        break;
    case 'wednesday':
    case 'thursday':
        console.log('Write code examples');
        break;
    case 'friday':
        console.log('Record videos');
        break;
    case 'saturday':
    case 'sunday':
        console.log('Enjoy the weekend :D');
        break;
    default:
        console.log('Not a valid day!');
}

### Statements and Expressions
--------------------------------
Expression is a peiece of code that produce a value.
3 + 4
1991
true && false && !false

Statements is big piece of code which does not produce a value. performs some action. declares a variable str here.
if (23 > 10) {
  const str = '23 is bigger';
}

### The Conditional (Ternary) Operator
--------------------------------------------
const age2 = 23;
age2 >= 18 ? console.log('I like to drink wine!') : console.log('I like to drink water');

const drink = age >= 18 ? 'wine 🍷' : 'water 💧';
console.log(drink);

let drink2;
if (age >= 18) {
    drink2 = 'wine 🍷';
} else {
    drink2 = 'water 💧';
}
console.log(drink2);

//we can use it as expression in template literal by using backticks
console.log(`I like to drink ${age >= 18 ? 'wine 🍷' : 'water 💧'}`);

### JavaScript Releases: ES5, ES6+ and ESNext.
------------------------------------------------



### Activating Strict Mode:
----------------------------
write begining of script - very first statement in *.js file
- help us to avoids accidental errors when we do mistakes in code..
- simply type checking

Ex: script.js
	'use strict';

	// Activating Strict Mode
	let hasDriversLicense = false;
	const passTest = true;

	if (passTest) hasDriversLicense = true;
	if (hasDriversLicense) console.log('I can drive :D');

	//const interface = 'Audio';
	// const private = 534;

### Functions:
----------------
A function is a peice of code which we can reuse them again and again.
A function can receieve data and return data back.

//Function Declaration
function logger() {
    console.log('My name is Jonas');
}

// calling / running / invoking function
logger();
logger();
logger();

function fruitProcessor(apples, oranges) {
    //console.log(apples, oranges);
    const juice = `Juice with ${apples} apples and ${oranges} oranges.`;
    return juice;
}

const appleJuice = fruitProcessor(5, 0);
console.log(appleJuice);
//console.log(fruitProcessor(5, 0));

const appleOrangeJuice = fruitProcessor(2, 4);
console.log(appleOrangeJuice);

const num = Number('23');
console.log(num);
console.log(typeof (num));

### Function Declarations vs. Function Expressions
-----------------------------------------------------
//Function Declarations
function calcAge1(birthYeah) {
    return 2037 - birthYeah;
}
const age1 = calcAge1(1991);

// Function expression.. write a function without a name and store all this into a variable. 
//function without a name also called Anonymous function
//Expression produces a value and we use that value and store into a variable. This variable hold a function value.
//Function is a value which we can store into a variable.
const calcAge2 = function (birthYeah) {
    return 2037 - birthYeah;
}
const age2 = calcAge2(1991);

console.log(age1, age2);

### Arrow functions ( introduced in ES6)
----------------------
one line function..no curly braces either..
we dont specify return type..after the arrow it returns.
value will return automatically implicitly without writing return keyword.

//one line function.. calculate birthYear.
const calcAge3 = birthYeah => 2037 - birthYeah;
const age3 = calcAge3(1991);
console.log(age3);

//Example with more lines
const yearsUntilRetirement = (birthYear, firstName) => {
    const age = 2037 - birthYear;
    const retirement = 65 - age;
    // return retirement;
    return `${firstName} retires in ${retirement} years`;
}
console.log(yearsUntilRetirement(1991, 'Jonas'));
console.log(yearsUntilRetirement(1980, 'Bob'));

### Functions Calling Other Functions
---------------------------------------
function cutFruitPieces(fruit) {
    return fruit * 4;
}

function fruitProcessor(apples, oranges) {
    const applePieces = cutFruitPieces(apples);
    const orangePieces = cutFruitPieces(oranges);

    const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
    return juice;
}
console.log(fruitProcessor(2, 3));

### Introduction to Arrays:
-----------------------------
const friends = ['Michael', 'Steven', 'Peter'];
console.log(friends);

const y = new Array(1991, 1984, 2008, 2020);

console.log(friends[0]);
console.log(friends[2]);

console.log(friends.length);
console.log(friends[friends.length - 1]);

### Basic Array Operations (Methods)
-------------------------------------
//Add elements
push() - Adds elements to the end of the Array. Also returns the length of the new array.
unshift() - To add the elements to the begining of the Array. Also returns the length of the new array.

// Remove elements
pop() - remove the last element of the array. returns the removed element.
shift() - remove the first element from the array

indexOf() -- returns the index of the element.
includes() -- instead of returning index of the element..returns true if element is in the array..and false if its not.

### Introduction to Objects
----------------------------
//Object array - Array inside Array.
const jonasArray = [
    'Jonas',
    'Schmedtmann',
    2037 - 1991,
    'teacher',
    ['Michael', 'Peter', 'Steven']
];

//Object - Array inside Object.
const jonas = {
    firstName: 'Jonas',
    lastName: 'Schmedtmann',
    age: 2037 - 1991,
    job: 'teacher',
    friends: ['Michael', 'Peter', 'Steven']
};

### Dot vs. Bracket Notation
-------------------------------
undefined - means when u try to access a property on the object that does not exist.

const jonasObj = {
    firstName: 'Jonas',
    lastName: 'Schmedtmann',
    age: 2037 - 1991,
    job: 'teacher',
    friends: ['Michael', 'Peter', 'Steven']
};
console.log(jonasObj);

console.log(jonasObj.lastName);
console.log(jonasObj['lastName']);

//when you compute
const nameKey = 'Name';
console.log(jonasObj['first' + nameKey]);
console.log(jonasObj['last' + nameKey]);

### Object Methods
--------------------










﻿
​
